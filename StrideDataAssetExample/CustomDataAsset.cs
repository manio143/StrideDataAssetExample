using System;
using System.Collections.Generic;
using Stride.Core;
using Stride.Core.Assets;
using Stride.Core.Serialization;
using Stride.Core.Serialization.Contents;

namespace StrideDataAssetExample
{
    // This is a custom data asset which is composed of two parts:
    // - CustomDataAsset - the runtime class you use in your game
    // - CustomDataAssetDesign - the design class you use in the GameStudio editor
    // In order to get a runtime object from the design object you also need to provide a converter.
    //
    // In this example we will generate a list of random numbers at compile time
    // using a seed and length provided in the design object.

    // Let's go over the mandatory attributes for a class implementing IDataAsset:
    // First, we have [DataContract] which indicates to the AssemblyProcessor it should generate
    // a serializer for this class.
    [DataContract]
    // Next, we need [ReferenceSerializer] which indicates to the AssetRegistry
    // that this is a "Content" type and should be treated as a reference to an asset.
    [ReferenceSerializer]
    // Next, we need [ContentSerializer] which is used to create a serializer used by
    // ContentManager - the class responsible for loading content at runtime
    // and for saving the instance of the asset that references are pointing to.
    [ContentSerializer(typeof(DataContentSerializerWithReuse<CustomDataAsset>))]
    // Finally, we need to register a serializer for this class under the profile "Content"
    // which is used instead of the "Default" serializer generated by [DataContract].
    // What we're saying here is, treat this class as a reference to some managed object
    // when serialized. The only time it's not serialized as a reference is in the ContentManager
    // using the serializer defined above.
    [DataSerializerGlobal(typeof(ReferenceSerializer<CustomDataAsset>), Profile = "Content")]
    public class CustomDataAsset : IDataAsset
    {
        public int[] Values { get; set; }
    }

    [DataContract] // needs data contract to be serialized into the generic DataAsset<T>.
    public class CustomDataAssetDesign : IDataAssetDesign<CustomDataAsset>
    {
        public int Length { get; set; }
        public int Seed { get; set; }
    }

    [DataContract] // needs data contract to be serialized into the generic DataAsset<T>.
    public class CustomDataAssetConverter : IDataAssetConverter<CustomDataAsset>
    {
        public CustomDataAsset Convert(IDataAssetDesign<CustomDataAsset> designData)
        {
            var design = (CustomDataAssetDesign)designData;
            var result = new CustomDataAsset { Values = new int[design.Length] };

            // Usually here would be some lengthy computation going on, which is why
            // we do it at compile time.
            var rng = new Random(design.Seed);
            for (int i = 0; i < design.Length; i++)
                result.Values[i] = rng.Next();

            return result;
        }
    }
}
